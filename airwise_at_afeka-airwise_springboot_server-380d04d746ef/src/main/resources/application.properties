## the name of the application is chosen by the name of the Team Leader in order to id us from the rest of the groups
spring.application.name=2025b.Avital.Vissoky 
spring.application.idSeparator=#::#

external.api.demoac.base_url=http://localhost:3001/api/ac

server.port=8084

logging.level.org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping=trace

## log MongoDB queries and their parameters 
logging.level.org.springframework.data.mongodb.core.MongoTemplate=trace

### SQL-DB properties start
## NOTE: this configuration must be changed when shifting to production to: validate
#spring.jpa.hibernate.ddl-auto=create-drop

## log SQL queries and their parameters 
# spring.jpa.show-sql=true
# logging.level.org.hibernate.orm.jdbc.bind=trace
# logging.level.org.hibernate.type=trace
# spring.jpa.properties.hibernate.format_sql=true

## set DB properties: URL,USERNAME,PASSWORD 
# spring.datasource.url=jdbc:postgresql://localhost:5433/AirWiseDB
# spring.datasource.username=myuser
# spring.datasource.password=secret
# spring.datasource.driver-class-name=org.postgresql.Driver

## utility for reviewing relational database using a web console
# spring.h2.console.path=/h2-console
# spring.h2.console.enabled=true
### SQL-DB properties end

## Enable Springdoc OpenAPI (Swagger UI)
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/v3/api-docs

## logging level of messages from chosen classes by writing three things:
# append: @Profile("writeHereOurProfileType") on top of the chosen class
# append: private Log log = LogFactory.getLog(name_of_chosen_class.class);
# here in this file append: logging.level.demo.name_of_chosen_class=typeOfLog

## use this configuration to initialize server with default configuraiton and 
## if we wish to add profiles to default then we need to write: default , writeHereOurProfileType
spring.profiles.active=default

## log level info for classes:
logging.level.ambient_intelligence=info

## MongoDB uri explanation:
## The authSource parameter in the connection url indicates the authentication database.
## The admin database is MongoDB's default database for storing administrative users: root or superusers
## In our compose.yaml, we defined:
## - 'MONGO_INITDB_ROOT_PASSWORD=secret'
## - 'MONGO_INITDB_ROOT_USERNAME=myuser'
## These settings create a root user (myuser with password secret) in the admin database, 
## granting it privileges across all databases, including AirWiseDB.
spring.data.mongodb.uri=mongodb://myuser:secret@localhost:27017/AirWiseDB?authSource=admin

spring.mail.host=smtp.gmail.com
spring.mail.port=587

# 2 ways to authenticate:
# 1)
# Enter the following on windows powershell: 
# $env:GMAIL_USER = "your-email@gmail.com"
# for email sending to work we need to set app password for "Mail"
# $env:GMAIL_APPPASS = "your-16char-password-for-Mail-App-without-spaces"
# These variables will only last for the current PowerShell session
# spring.mail.username=${GMAIL_USER}
# spring.mail.password=${GMAIL_APPPASS}
# -----------------------------------------------------------------------------
# 2)
# Enter the details in a hardcoded manner like this:
# spring.mail.username=email@gmail.com
# spring.mail.password=abcdefghijklmnop

spring.mail.username=email@gmail.com
spring.mail.password=abcdefghijklmnop

spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
